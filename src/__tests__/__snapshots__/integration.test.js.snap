// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`integration tests render server and client 1`] = `"<div><div><div><span>In Render.</span></div><div>DeferredAsyncBob Loading</div><div><span>In Boundary but outside an AsyncComponent, server render me!</span></div><div>This always errors</div></div></div>"`;

exports[`integration tests render server and client 2`] = `
Object {
  "errors": Object {
    "6": "This always errors",
  },
  "resolved": Object {
    "1": true,
    "2": true,
    "4": true,
  },
}
`;

exports[`integration tests render server and client 3`] = `
<AsyncComponentProvider
  execContext={
    Object {
      "getComponent": [Function],
      "getError": [Function],
      "getNextId": [Function],
      "getState": [Function],
      "registerComponent": [Function],
      "registerError": [Function],
    }
  }
>
  <AsyncBob>
    <Bob>
      <div>
        <div>
          <AsyncBobTwo>
            <Bob>
              <div>
                <span>
                  In Render.
                </span>
              </div>
            </Bob>
          </AsyncBobTwo>
          <DeferredAsyncBob>
            <LoadingComponent>
              <div>
                DeferredAsyncBob Loading
              </div>
            </LoadingComponent>
          </DeferredAsyncBob>
          <BoundaryAsyncBob>
            <Bob>
              <div>
                <span>
                  In Boundary but outside an AsyncComponent, server render me!
                </span>
                <AsyncBobThree />
              </div>
            </Bob>
          </BoundaryAsyncBob>
          <ErrorAsyncComponent>
            <ErrorComponent
              message="This always errors"
            >
              <div>
                This always errors
              </div>
            </ErrorComponent>
          </ErrorAsyncComponent>
        </div>
      </div>
    </Bob>
  </AsyncBob>
</AsyncComponentProvider>
`;

exports[`integration tests render server and client 4`] = `
<AsyncComponentProvider
  execContext={
    Object {
      "getComponent": [Function],
      "getError": [Function],
      "getNextId": [Function],
      "getState": [Function],
      "registerComponent": [Function],
      "registerError": [Function],
    }
  }
>
  <AsyncBob>
    <Bob>
      <div>
        <div>
          <AsyncBobTwo>
            <Bob>
              <div>
                <span>
                  In Render.
                </span>
              </div>
            </Bob>
          </AsyncBobTwo>
          <DeferredAsyncBob>
            <Bob>
              <div>
                <span>
                  In Defer.
                </span>
              </div>
            </Bob>
          </DeferredAsyncBob>
          <BoundaryAsyncBob>
            <Bob>
              <div>
                <span>
                  In Boundary but outside an AsyncComponent, server render me!
                </span>
                <AsyncBobThree>
                  <Bob>
                    <div>
                      <span>
                        In Boundary - Do not server render me!
                      </span>
                    </div>
                  </Bob>
                </AsyncBobThree>
              </div>
            </Bob>
          </BoundaryAsyncBob>
          <ErrorAsyncComponent>
            <ErrorComponent
              message="This always errors"
            >
              <div>
                This always errors
              </div>
            </ErrorComponent>
          </ErrorAsyncComponent>
        </div>
      </div>
    </Bob>
  </AsyncBob>
</AsyncComponentProvider>
`;

exports[`integration tests renders the ErrorComponent 1`] = `
<AsyncComponentProvider
  execContext={
    Object {
      "getComponent": [Function],
      "getError": [Function],
      "getNextId": [Function],
      "getState": [Function],
      "registerComponent": [Function],
      "registerError": [Function],
    }
  }
>
  <AsyncComponent>
    <ErrorComponent
      message="An error occurred"
    >
      <div>
        An error occurred
      </div>
    </ErrorComponent>
  </AsyncComponent>
</AsyncComponentProvider>
`;

exports[`integration tests renders the LoadingComponent 1`] = `
<AsyncComponentProvider
  execContext={
    Object {
      "getComponent": [Function],
      "getError": [Function],
      "getNextId": [Function],
      "getState": [Function],
      "registerComponent": [Function],
      "registerError": [Function],
    }
  }
>
  <AsyncComponent>
    <LoadingComponent>
      <div>
        Loading...
      </div>
    </LoadingComponent>
  </AsyncComponent>
</AsyncComponentProvider>
`;
